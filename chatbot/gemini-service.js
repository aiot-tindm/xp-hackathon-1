const { createPartFromUri, createUserContent, GoogleGenAI } = require('@google/genai');
const { getItemList, getOrderList, getCustomerList, getSalesAnalytics, getInventoryAnalytics, getRevenueAnalytics } = require('./api-service');
require('dotenv').config();

class GeminiService {
    constructor() {
        this.genAI = new GoogleGenAI(process.env.GEMINI_API_KEY);
        this.fileContent = [];
    }

    async init() {
        await this.fetchData();
    }

    async analyzeData(question) {
        try {
            if (!this.fileContent.length) {
                await this.fetchData();
            }

            const prompt = `
                    B·∫°n l√† m·ªôt chuy√™n gia ph√¢n t√≠ch d·ªØ li·ªáu. B·∫°n ƒë∆∞·ª£c cung c·∫•p m·ªôt m·∫£ng c√°c ƒë·ªëi t∆∞·ª£ng JSON. M·ªói ƒë·ªëi t∆∞·ª£ng ƒë·∫°i di·ªán cho m·ªôt giao d·ªãch b√°n h√†ng.
 
                    S·ª≠ d·ª•ng d·ªØ li·ªáu n√†y ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi d∆∞·ªõi ƒë√¢y B·∫∞NG TI·∫æNG VI·ªÜT.
 
                    C√¢u h·ªèi:
                    ${question}
 
                    üîç Y√™u c·∫ßu ƒë·ªãnh d·∫°ng ƒë·∫ßu ra (B·∫∞NG TI·∫æNG VI·ªÜT):
                        1. Ph√¢n t√≠ch (k·∫øt lu·∫≠n t·ª± nhi√™n):
                            - Cung c·∫•p t√≥m t·∫Øt ho·∫∑c th√¥ng tin chi ti·∫øt ng·∫Øn g·ªçn b·∫±ng ng√¥n ng·ªØ t·ª± nhi√™n.
                            - KH√îNG s·ª≠ d·ª•ng c·∫∑p key-value ·ªü ƒë√¢y.
                            - Gi·ªØ t√¥ng ƒëi·ªáu chuy√™n nghi·ªáp v√† h∆∞·ªõng kinh doanh.
                            - Tr·∫£ l·ªùi ho√†n to√†n b·∫±ng ti·∫øng Vi·ªát.
 
                        2. Tham kh·∫£o (t√πy ch·ªçn):
                            - Ch·ªâ bao g·ªìm ph·∫ßn n√†y n·∫øu c√¢u h·ªèi li√™n quan ƒë·∫øn: hi·ªáu su·∫•t b√°n h√†ng, doanh thu, s·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t, ho·∫∑c th∆∞∆°ng hi·ªáu ho·∫°t ƒë·ªông t·ªët nh·∫•t...
                            - KH√îNG bao g·ªìm ph·∫ßn n√†y cho c√°c c√¢u h·ªèi v·ªÅ k·∫ø ho·∫°ch, chi·∫øn l∆∞·ª£c, ho·∫∑c ƒë·ªÅ xu·∫•t.
                            - Tr·∫£ l·ªùi ch·ªâ s·ª≠ d·ª•ng ƒë·ªãnh d·∫°ng "key: value" B·∫∞NG TI·∫æNG VI·ªÜT
                            - M·ªôt c·∫∑p key-value tr√™n m·ªói d√≤ng
                            - Kh√¥ng tr·∫£ v·ªÅ gi·∫£i th√≠ch ho·∫∑c vƒÉn b·∫£n t·ª± do
                            - S·ª≠ d·ª•ng c√°c key ng·∫Øn g·ªçn, m√¥ t·∫£ v√† nh·∫•t qu√°n b·∫±ng ti·∫øng Vi·ªát
                            - N·∫øu thi·∫øu gi√° tr·ªã, tr·∫£ v·ªÅ: "key: Kh√¥ng c√≥ d·ªØ li·ªáu"
                            - Kh√¥ng s·ª≠ d·ª•ng d·∫•u ƒë·∫ßu d√≤ng, b·∫£ng, ho·∫∑c JSON
                            - T·∫•t c·∫£ gi√° tr·ªã ph·∫£i ·ªü d·∫°ng vƒÉn b·∫£n thu·∫ßn t√∫y ho·∫∑c s·ªë
                            - N·∫øu ph√¢n t√≠ch li√™n quan ƒë·∫øn s·∫£n ph·∫©m/m·∫∑t h√†ng ‚Üí b·∫°n ph·∫£i bao g·ªìm:
                                - T√™n s·∫£n ph·∫©m: [b·∫Øt bu·ªôc]
                                - M√£ SKU: [b·∫Øt bu·ªôc]
                            - N·∫øu ph√¢n t√≠ch li√™n quan ƒë·∫øn doanh thu, gi√° tr·ªã, ho·∫∑c c√°c ch·ªâ s·ªë ti·ªÅn t·ªá ‚Üí b·∫°n ph·∫£i bao g·ªìm:
                                - C√¥ng th·ª©c: [v√≠ d·ª•: doanh thu = s·ªë l∆∞·ª£ng * gi√°]
                                - C√°c c·ªôt ngu·ªìn: [c√°c tr∆∞·ªùng d·ªØ li·ªáu g·ªëc ƒë∆∞·ª£c s·ª≠ d·ª•ng trong t√≠nh to√°n, c√°ch nhau b·∫±ng d·∫•u ph·∫©y]
                                - Ch·ªâ hi·ªÉn th·ªã gi√° tr·ªã c·ªôt ngu·ªìn th·ª±c t·∫ø khi ch·ªâ s·ªë ƒë∆∞·ª£c t√≠nh cho **m·ªôt m·∫∑t h√†ng c·ª• th·ªÉ** ho·∫∑c **m·ªôt ƒë∆°n h√†ng c·ª• th·ªÉ** (kh√¥ng ph·∫£i t·ªïng t√≠ch l≈©y).
                                    - ƒê·ªãnh d·∫°ng hi·ªÉn th·ªã gi√° tr·ªã:
                                        - T√™n c·ªôt: gi√° tr·ªã
                                        - V√≠ d·ª•:
                                            S·ªë l∆∞·ª£ng: 10
                                            Gi√°: 50
                                            Doanh thu: 500
                                    - ƒê·ªëi v·ªõi gi√° tr·ªã t√≠ch l≈©y qua nhi·ªÅu m·∫∑t h√†ng/ƒë∆°n h√†ng, KH√îNG hi·ªÉn th·ªã t·∫•t c·∫£ gi√° tr·ªã c·ªôt ngu·ªìn (ch·ªâ c·∫ßn c√¥ng th·ª©c + c·ªôt ngu·ªìn l√† ƒë·ªß).
 
                                - N·∫øu c√°c tr∆∞·ªùng li√™n quan c√≥ trong d·ªØ li·ªáu, c≈©ng bao g·ªìm:
                                    - T·ª∑ l·ªá chuy·ªÉn ƒë·ªïi: [t·ª∑ l·ªá chuy·ªÉn ƒë·ªïi, v√≠ d·ª•: chuy·ªÉn ƒë·ªïi / l∆∞·ª£t hi·ªÉn th·ªã]
                                    - ROI: [l·ª£i t·ª©c ƒë·∫ßu t∆∞, v√≠ d·ª•: (doanh thu - chi ph√≠) / chi ph√≠]
                                    - Gi√° tr·ªã ƒë∆°n h√†ng trung b√¨nh: [v√≠ d·ª•: doanh thu / s·ªë ƒë∆°n h√†ng]
                                    - Chi ph√≠: [n·∫øu c√≥]
                                    - CPC: [chi ph√≠ m·ªói l·∫ßn nh·∫•p, n·∫øu c√≥ d·ªØ li·ªáu nh·∫•p chu·ªôt v√† chi ph√≠]
                                    - CPM: [chi ph√≠ m·ªói 1000 l∆∞·ª£t hi·ªÉn th·ªã, n·∫øu c√≥ d·ªØ li·ªáu hi·ªÉn th·ªã v√† chi ph√≠]
                            - N·∫øu ph√¢n t√≠ch KH√îNG li√™n quan ƒë·∫øn doanh thu ho·∫∑c b·∫•t k·ª≥ ch·ªâ s·ªë t√†i ch√≠nh n√†o, KH√îNG bao g·ªìm c√°c chi ti·∫øt t√†i ch√≠nh nh∆∞ AOV, ROI, CVR, chi ph√≠, v.v.
                    üîç H∆∞·ªõng d·∫´n quan tr·ªçng:
                        - Ch·ªâ s·ª≠ d·ª•ng d·ªØ li·ªáu ƒë∆∞·ª£c cung c·∫•p trong t·ªáp. Kh√¥ng gi·∫£ ƒë·ªãnh ho·∫∑c t·∫°o ra th√¥ng tin th√™m.
                        - N·∫øu b·∫•t k·ª≥ ƒëi·ªÉm d·ªØ li·ªáu n√†o b·ªã thi·∫øu ho·∫∑c kh√¥ng th·ªÉ t√≠nh to√°n, h√£y n√≥i "Kh√¥ng c√≥ d·ªØ li·ªáu" ho·∫∑c "D·ªØ li·ªáu kh√¥ng ƒë·ªß".
                        - S·ª≠ d·ª•ng d·∫•u ƒë·∫ßu d√≤ng r√µ r√†ng v√† ng·∫Øn g·ªçn ho·∫∑c ƒë·ªãnh d·∫°ng b·∫£ng.
                        - Tr√°nh ng√¥n ng·ªØ hoa m·ªπ ho·∫∑c th∆° ca. Gi·ªØ t√¥ng ƒëi·ªáu chuy√™n nghi·ªáp v√† t·∫≠p trung v√†o d·ªØ li·ªáu.
                        - ƒê·ªëi v·ªõi d·ª± b√°o, ch·ªâ d·ª±a tr√™n xu h∆∞·ªõng c√≥ th·ªÉ nh√¨n th·∫•y trong d·ªØ li·ªáu ƒë∆∞·ª£c cung c·∫•p. Kh√¥ng ƒëo√°n.
                        - T·∫§T C·∫¢ PH·∫¢N H·ªíI PH·∫¢I B·∫∞NG TI·∫æNG VI·ªÜT.
 
                    `;


            const result = await this.genAI.models.generateContent({
                model: 'gemini-2.5-flash',
                contents: createUserContent([
                    ...this.fileContent,
                    '\n\n',
                    prompt,

                ]),
            });
            return result.text;
        } catch (error) {
            console.error('Error analyzing data:', error);
            throw new Error('Kh√¥ng th·ªÉ ph√¢n t√≠ch d·ªØ li·ªáu');
        }
    }

    // async generateInsights(data) {
    //     try {
    //         const prompt = `
    //         Ph√¢n t√≠ch d·ªØ li·ªáu sau v√† ƒë∆∞a ra nh·ªØng insights quan tr·ªçng:
    //         ${JSON.stringify(data, null, 2)}

    //         H√£y t√¨m ra:
    //         1. Xu h∆∞·ªõng ch√≠nh
    //         2. ƒêi·ªÉm b·∫•t th∆∞·ªùng
    //         3. C∆° h·ªôi c·∫£i thi·ªán
    //         4. D·ª± ƒëo√°n
    //         `;

    //         const result = await this.model.generateContent(prompt);
    //         const response = await result.response;
    //         return response.text();
    //     } catch (error) {
    //         console.error('Error generating insights:', error);
    //         throw new Error('Kh√¥ng th·ªÉ t·∫°o insights');
    //     }
    // }
    async uploadFile(data, fileName) {
        if (!data || (Array.isArray(data) && data.length === 0) || (typeof data === 'object' && Object.keys(data).length === 0)) {
            console.log(`‚ö†Ô∏è Skipping upload for ${fileName} - no data available`);
            return;
        }

        try {
            const jsonBuffer = Buffer.from(JSON.stringify(data, null, 2), 'utf-8');
            const fileBlob = new Blob([jsonBuffer], { type: "text/csv" });
            const file = await this.genAI.files.upload({
                file: fileBlob,
                config: { displayName: `${fileName}.csv` },
            });
            this.fileContent.push(createPartFromUri(file.uri, file.mimeType));
            console.log(`‚úÖ Uploaded ${fileName} with ${Array.isArray(data) ? data.length : 'object'} items`);
        } catch (error) {
            console.error(`‚ùå Failed to upload ${fileName}:`, error.message);
        }
    }
    async fetchData() {
        try {
            console.log('üìä Fetching data from customer service API...');
            
            const items = await getItemList();
            await this.uploadFile(items, 'items');

            const orders = await getOrderList();
            await this.uploadFile(orders, 'orders');

            const customers = await getCustomerList();
            await this.uploadFile(customers, 'customers');

            const sales = await getSalesAnalytics();
            await this.uploadFile(sales.data, 'sales');

            const inventory = await getInventoryAnalytics();
            await this.uploadFile(inventory.data, 'inventoryAnalytics');

            const revenue = await getRevenueAnalytics();
            await this.uploadFile(revenue.data, 'revenueAnalytics');

            console.log('üìà Data summary:', {
                items: items?.length ?? 0,
                orders: orders?.length ?? 0,
                customers: customers?.length ?? 0,
                sales: Object.keys(sales ?? {}).length,
                inventory: Object.keys(inventory ?? {}).length,
                revenue: Object.keys(revenue ?? {}).length
            });

            if (this.fileContent.length === 0) {
                console.warn('‚ö†Ô∏è No data available from customer service API');
            } else {
                console.log(`‚úÖ Successfully loaded ${this.fileContent.length} data files`);
            }
            return 
        } catch (error) {
            console.error('‚ùå Error fetching data:', error.message);
            throw new Error('Failed to fetch data from customer service');
        }
    }


}

module.exports = GeminiService;