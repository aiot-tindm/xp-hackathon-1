services:
  inventory_sales_db:
    image: mysql:8.0
    container_name: inventory_sales_db
    environment:
      - MYSQL_DATABASE
      - MYSQL_USER
      - MYSQL_PASSWORD
      - MYSQL_ROOT_PASSWORD
    ports:
      - "3306:3306"
    volumes:
      - ./mysql_data:/var/lib/mysql
      - ./database/init:/docker-entrypoint-initdb.d
    healthcheck:
      test:
        [
          "CMD",
          "mysqladmin",
          "ping",
          "-h",
          "localhost",
          "-u",
          "root",
          "-p$$MYSQL_ROOT_PASSWORD",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  # adminer:
  #   image: adminer:standalone
  #   restart: always
  #   depends_on:
  #     - inventory_sales_db
  #   ports:
  #     - 8080:8080

  cron-job:
    build:
      context: ./analysis-inventory
      dockerfile: cron-job/Dockerfile
    container_name: analytics_cron_job
    restart: unless-stopped
    depends_on:
      - inventory_sales_db
    environment:
      # Database connection
      - DB_HOST
      - DB_PORT
      - DB_USER
      - DB_PASS
      - DB_NAME
      # Python settings
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
    volumes:
      # Mount logs directory
      - ./logs:/app/logs
      # Mount .env file if exists
      - ./.env:/app/.env:ro

  # API Server Service (cung cáº¥p REST API)
  analysis-inventory:
    build:
      context: ./analysis-inventory
      dockerfile: api-server/Dockerfile
    container_name: analytics_api_server
    restart: unless-stopped
    depends_on:
      - inventory_sales_db
    environment:
      # Database connection
      - DB_HOST
      - DB_PORT
      - DB_USER
      - DB_PASS
      - DB_NAME
      # Python settings
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - FLASK_ENV=production
    volumes:
      - ./logs:/app/logs
      - ./.env:/app/.env:ro

  export-pdf:
    build:
      context: ./export-pdf
    env_file:
      - ./.env

  customer-service:
    build:
      context: ./customer-service/api-server
    env_file:
      - ./.env
    depends_on:
      inventory_sales_db:
        condition: service_healthy

  chatbot-ui:
    build:
      context: ./chatbot-ui
      dockerfile: Dockerfile
    container_name: chatbot-ui
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_CHATBOT_BASE_URL=
      - NEXT_PUBLIC_EXPORT_PDF_BASE_URL=
    depends_on:
      - chatbot-backend
    restart: unless-stopped

  chatbot-backend:
    build:
      context: ./chatbot
      dockerfile: Dockerfile
    container_name: chatbot-backend
    environment:
      - NODE_ENV=production
      - GEMINI_API_KEY
    restart: unless-stopped
    volumes:
      - chatbot-data:/app/data

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - analysis-inventory
      - export-pdf
      - chatbot-ui
      - chatbot-backend
      - customer-service

volumes:
  chatbot-data:
    name: chatbot-data
